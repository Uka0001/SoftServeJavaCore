pt1. Declare collection myCollection of 10 integers and fill it (from the console or random).
   Find and save in list newCollection all positions of element more than 5 in the collection. Print newCollection
   Remove from collection myCollection elements, which are greater then 20. Print result
   Insert elements 1, -3, -4 in positions 2, 8, 5. Print result in the format: “position – xxx, value of element – xxx”
   Sort and print collection
pt2. In the main() method declare map employeeMap of pairs <Integer, String>.
     Add to employeeMap seven pairs (ID, name) of some persons. Display the map on the screen.
     Ask user to enter ID, then find and write corresponding name from your map. If you can't find this ID - say about it to user (use function containsKey()).
     Ask user to enter name, verify than you have name in your map and write corresponding ID. If you can't find this name - say about it to user (use function containsValue()).
hw1. Write parameterized methods union(Set set1, Set set2) and intersect(Set set1, Set set2),
 realizing the operations of union and intersection of two sets.
  Test the operation of these techniques on two pre-filled sets.
hw2. Create map personMap and add to it ten persons of type <String, String> (lastName, firstName).
     Output the entities of the map on the screen.
     There are at less two persons with the same firstName among these 10 people?
     Remove from the map person whose firstName is ”Orest” (or other). Print result.
hw3. Write class Student that provides information about the name of the student and his course. Class Student should consist of
     properties for access to these fields
     constructor with parameters
     method printStudents (List students, Integer course), which receives a list of students and the course number and prints to the console the names of the students from the list, which are taught in this course (use an iterator)
     methods to compare students by name and by course
     In the main() method
     declare List students and add to the list five different students
     display the list of students ordered by name
     display the list of students ordered by course.

